-- Pull in the wezterm API
local wezterm = require("wezterm")
local mux = wezterm.mux
local act = wezterm.action
local scheme = wezterm.color.get_default_colors()
-- This table will hold the configuration.
local config = {}

-- In newer versions of wezterm, use the config_builder which will
-- help provide clearer error messages
if wezterm.config_builder then
	config = wezterm.config_builder()
end

-- This is where you actually apply your config choices

-- For example, changing the color scheme:
-- config.color_scheme = "AdventureTime"
config.font_size = 11.0
-- config.enable_kitty_keyboard = true
config.scrollback_lines = 50000
-- and finally, return the configuration to wezterm
config.initial_cols = 150
config.initial_rows = 42
-- config.tab_bar_fill = true

config.use_fancy_tab_bar = true 
config.show_tab_index_in_tab_bar = false
config.switch_to_last_active_tab_when_closing_tab = true
config.quick_select_patterns = {
	-- Original regex [[(?P<path>(?:\S*?/[\r\S]+)|(?:\S[\r\S]*\.(?:[a-zA-Z0-9]{2,7}|[ahcmo])(?:\b|[^.]))\b):(?P<line>\d+)]],
	-- Match filenames with optional line numbers
	[[((?:\S*?/[\r\S]+)|(?:\S[\r\S]*\.(?:[a-zA-Z0-9]{2,7}|[ahcmo])(?:\b|[^.]))\b)(?:\d+)?]],
}
config.keys = {
	{
		key = "LeftArrow",
		mods = "CTRL|SHIFT",
		action = act.ActivateTabRelative(-1),
	},
	{
		key = "RightArrow",
		mods = "CTRL|SHIFT",
		action = act.ActivateTabRelative(1),
	},
}

config.colors = {
	tab_bar = {
		background = "black",
		inactive_tab_hover = { bg_color = "black", fg_color = "black", italic = false },
		new_tab = { bg_color = "black", fg_color = "bisque", intensity = "Bold" },
		new_tab_hover = { bg_color = "black", fg_color = "gold", intensity = "Bold" },
	},
}

local function get_font_config(weights, italic)
	return wezterm.font_with_fallback({
		{ family = "JetBrainsMono Nerd Font", weight = weights[1], style = italic and "Italic" or "Normal" },
		-- { family = "Sarasa Mono SC", weight = weights[2], style = italic and "Italic" or "Normal" },
		"Symbols Nerd Font",
	})
end
config.font_rules = {
	{ intensity = "Normal", italic = false, font = get_font_config({ "Bold", "DemiBold" }) },
	{ intensity = "Bold", italic = false, font = get_font_config({ "Bold", "DemiBold" }) },
	{ intensity = "Half", italic = false, font = get_font_config({ "Regular", "Regular" }) },
	{ intensity = "Normal", italic = true, font = get_font_config({ "Bold", "DemiBold" }, true) },
	{ intensity = "Bold", italic = true, font = get_font_config({ "Bold", "DemiBold" }, true) },
	{ intensity = "Half", italic = true, font = get_font_config({ "Regular", "Regular" }, true) },
}
local function basename(str)
	local name = string.gsub(str, "(.*/)(.*)", "%2")
	return name
end
local function escape(pattern)
	if pattern == nil or pattern == "" then
		return nil
	end
	return pattern:gsub("%W", "%%%1")
end

local function get_deco_array(length, sub_characters)
	local deco_array = {}

	for i = 1, length do
		local deco_string = ""

		for j = 1, #tostring(i) do
			deco_string = deco_string .. sub_characters[tonumber(tostring(i):sub(j, j)) + 1]
		end

		deco_array[i] = deco_string
	end

	return deco_array
end

local function in_array(value, array)
	for _, val in ipairs(array) do
		if val == value then
			return true
		end
	end

	return false
end

local function get_repeated_array(obj, times)
	local array = {}

	for i = 1, times do
		array[i] = obj
	end

	return array
end

local function capitalize(str)
	return (str:gsub("^%l", string.upper))
end

local function get_domain_name(str)
	return str:gsub("^[A-Z]*MUX:", "")
end

local function get_process_name(str)
	return str:gsub("^.*[/\\]", ""):gsub("%.exe$", "")
end
local function convert_home_dir(path)
	return path:gsub("^" .. wezterm.home_dir .. "/", "~/")
end
wezterm.on("format-tab-title", function(tab, tabs, panes, config, hover, max_width)
	local SOLID_LEFT_ARROW = wezterm.nerdfonts.ple_lower_right_triangle
	local SOLID_RIGHT_ARROW = wezterm.nerdfonts.ple_upper_left_triangle
	local SOLID_LEFT_MOST = wezterm.nerdfonts.ple_left_half_circle_thick
	local SOLID_RIGHT_MOST = wezterm.nerdfonts.ple_right_half_circle_thick

	local SSH_DOMAIN = wezterm.nerdfonts.md_collage

	local SERVER_ICON = wezterm.nerdfonts.md_access_point
	local SHELL_ICON = wezterm.nerdfonts.md_console_line
	local WIN_ICON = wezterm.nerdfonts.md_windows
	local REMOTE_ICON = wezterm.nerdfonts.md_cloud
	local DASHBOARD_ICON = wezterm.nerdfonts.md_gauge
	local TEXT_EDITOR_ICON = wezterm.nerdfonts.md_pen
	local INSPECT_ICON = wezterm.nerdfonts.md_magnify
	local TRANSFER_ICON = wezterm.nerdfonts.md_flash

	local PYTHON_ICON = wezterm.nerdfonts.md_language_python
	local R_ICON = wezterm.nerdfonts.md_language_r

	local TASK_PENDING_ICON = wezterm.nerdfonts.md_run

	local SUBSCRIPTS = get_deco_array(100, { "₀", "₁", "₂", "₃", "₄", "₅", "₆", "₇", "₈", "₉" })
	local SUPERSCRIPTS = get_deco_array(100, { "⁰", "¹", "²", "³", "⁴", "⁵", "⁶", "⁷", "⁸", "⁹" })

	local has_unseen_output = false

	for _, pane in ipairs(tab.panes) do
		if pane.has_unseen_output then
			has_unseen_output = true

			break
		end
	end

	local background = tab.is_active and "gold"
		or hover and "chocolate"
		or has_unseen_output and "lightsteelblue"
		or "dimgray"
	local edge_background = "black"
	local foreground = "black"
	local edge_foreground = background

	local exec_name = ""
	local title_with_icon = ""
	local title = ""

	if tab.active_pane.foreground_process_name == "" then
		if tab.active_pane.domain_name == "local" then
			title_with_icon = TASK_PENDING_ICON .. " ..."
		else
			domain_name = get_domain_name(tab.active_pane.domain_name)
			title_with_icon = SSH_DOMAIN .. " " .. domain_name
		end
	else
		exec_name = get_process_name(tab.active_pane.foreground_process_name)

		if exec_name == "wezterm-gui" then
			title_with_icon = SERVER_ICON .. " WezTerm"
		elseif in_array(exec_name, { "sh", "bash", "zsh" }) then
			title_with_icon = SHELL_ICON .. " " .. capitalize(exec_name)
		elseif exec_name == "cmd" then
			title_with_icon = WIN_ICON .. " CMD"
		elseif in_array(exec_name, { "wsl", "wslhost" }) then
			title_with_icon = WIN_ICON .. " WSL"
		elseif in_array(exec_name, { "ssh", "sftp" }) then
			title_with_icon = REMOTE_ICON .. " " .. exec_name:upper()
		elseif in_array(exec_name, { "btm", "top", "htop", "ntop" }) then
			title_with_icon = DASHBOARD_ICON .. " " .. exec_name
		elseif exec_name == "nano" then
			title_with_icon = TEXT_EDITOR_ICON .. " nano"
		elseif exec_name == "vim" then
			title_with_icon = TEXT_EDITOR_ICON .. " Vim"
		elseif exec_name == "nvim" then
			title_with_icon = TEXT_EDITOR_ICON .. " Neovim"
		elseif in_array(exec_name, { "bat", "less", "moar" }) then
			title_with_icon = INSPECT_ICON .. " " .. exec_name
		elseif in_array(exec_name, { "fzf", "peco" }) then
			title_with_icon = INSPECT_ICON .. " " .. exec_name
		elseif exec_name == "man" then
			title_with_icon = INSPECT_ICON .. " Manual"
		elseif in_array(exec_name, { "aria2c", "curl", "wget", "yt-dlp" }) then
			title_with_icon = TRANSFER_ICON .. " " .. exec_name
		elseif in_array(exec_name, { "python", "Python" }) then
			title_with_icon = PYTHON_ICON .. " Python"
		elseif exec_name == "R" then
			title_with_icon = R_ICON .. " R"
		else
			title_with_icon = TASK_PENDING_ICON .. " " .. exec_name
		end
	end
	if tab.active_pane.current_working_dir then
		local path_string = convert_home_dir(tab.active_pane.current_working_dir.path)
		local current_width = wezterm.column_width(title_with_icon)
		local working_dir_width = wezterm.column_width(path_string)
		print("Max width is " .. max_width)
		print("Current width is " .. current_width)
		print("Truncation width is " .. max_width - current_width - 10)
		print("Path width is " .. working_dir_width)
		title_with_icon = title_with_icon .. ":" .. wezterm.truncate_left(path_string, max_width - current_width - 10)
	end
	if wezterm.truncate_right(title_with_icon, max_width - 6) ~= title_with_icon then
		title = " " .. wezterm.truncate_right(title_with_icon, max_width - 8) .. " .."
	else
		title = " " .. title_with_icon .. " "
	end

	local tab_id = SUBSCRIPTS[tab.tab_index + 1]
	local pane_id = SUPERSCRIPTS[tab.active_pane.pane_index + 1]

	return {
		{ Background = { Color = edge_background } },
		{ Foreground = { Color = edge_foreground } },
		{ Text = tab.tab_index == 0 and SOLID_LEFT_MOST or SOLID_LEFT_ARROW },
		{ Background = { Color = background } },
		{ Foreground = { Color = foreground } },
		{ Text = tab_id },
		{ Text = title },
		{ Text = pane_id },
		{ Background = { Color = edge_background } },
		{ Foreground = { Color = edge_foreground } },
		{ Text = tab.tab_index == #tabs - 1 and SOLID_RIGHT_MOST or SOLID_RIGHT_ARROW },
	}
end)

wezterm.on("update-status", function(window, pane)
	local batteries = ""
	wezterm.GLOBAL.hourglass = wezterm.GLOBAL.hourglass or 0

	for _, battery in ipairs(wezterm.battery_info()) do
		local battery_icon = wezterm.nerdfonts.fa_battery_full

		if battery.state_of_charge < 0.1 then
			battery_icon = wezterm.nerdfonts.fa_battery_empty
		elseif battery.state_of_charge < 0.25 then
			battery_icon = wezterm.nerdfonts.fa_battery_quarter
		elseif battery.state_of_charge < 0.5 then
			battery_icon = wezterm.nerdfonts.fa_battery_half
		elseif battery.state_of_charge < 0.75 then
			battery_icon = wezterm.nerdfonts.fa_battery_three_quarters
		end

		batteries = battery_icon .. string.format(" %.0f%%", battery.state_of_charge * 100) .. "  "
	end

	local meta = pane:get_metadata() or {}

	if meta.is_tardy then
		local seconds = meta.since_last_response_ms / 1000.0

		if seconds > 5 then
			local tardy_icon = wezterm.nerdfonts.fa_hourglass_start

			if wezterm.GLOBAL.hourglass == 1 then
				tardy_icon = wezterm.nerdfonts.fa_hourglass_half
			elseif wezterm.GLOBAL.hourglass == 2 then
				tardy_icon = wezterm.nerdfonts.fa_hourglass_end
			end

			wezterm.GLOBAL.hourglass = wezterm.GLOBAL.hourglass + 1
			local tardy = tardy_icon .. string.format(" %.1fs", seconds) .. "  "

			window:set_right_status(wezterm.format({
				{ Attribute = { Intensity = "Bold" } },
				{ Text = tardy .. batteries .. wezterm.strftime("%H:%M ") },
			}))

			return
		end
	end

	wezterm.GLOBAL.hourglass = 0

	window:set_right_status(wezterm.format({
		{ Text = batteries .. wezterm.strftime("%H:%M ") },
	}))
end)

wezterm.on("format-window-title", function(tab, pane, tabs, panes, config)
	return tab.active_pane.title .. " (" .. tab.active_pane.domain_name .. ")"
end)
return config
